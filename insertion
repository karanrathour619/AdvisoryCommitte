#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
#define max_vect(v) *max_element(v.begin(), v.end())
#define min_vect(v) *min_element(v.begin(), v.end())
#define vll vector<long long>
#define f(i,k,n) for(ll i=k; i<n; i++)
#define e endl
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define pvec(v,n) for(ll i=0; i<n; i++){ cout<<v[i]<<" "; } cout<<endl;
#define sorting(v) sort(v.begin(),v.end())
#define pr(a) cout<<a<<endl
#define w int t; cin>>t; while(t--)

const int ORDER = 3;

class BTreeNode {
public:
    int keys[ORDER - 1];
    BTreeNode* children[ORDER];
    int numKeys;
    bool leaf;

    BTreeNode(bool leaf);
    void traverse();
    void insertNonFull(int key);
    void splitChild(int index, BTreeNode* child);
    int findKey(int key);
    void remove(int key);
    void removeFromLeaf(int idx);
    void removeFromNonLeaf(int idx);
    int getPredecessor(int idx);
    int getSuccessor(int idx);
    void fill(int idx);
    void borrowFromPrev(int idx);
    void borrowFromNext(int idx);
    void merge(int idx);

    friend class BTree;
};

class BTree {
public:
    BTreeNode* root;
    BTree() { root = nullptr; }
    void insert(int key);
    void remove(int key);
    void traverse() { if(root) root->traverse(); }
};

BTreeNode::BTreeNode(bool leaf) {
    this->leaf = leaf;
    numKeys = 0;
    f(i, 0, ORDER) {
        children[i] = nullptr;
    }
}

void BTree::insert(int key) {
    if(root == nullptr) {
        root = new BTreeNode(true);
        root->keys[0] = key;
        root->numKeys = 1;
    } else {
        if(root->numKeys == ORDER - 1) {
            BTreeNode* s = new BTreeNode(false);
            s->children[0] = root;
            s->splitChild(0, root);
            int i = 0;
            if(s->keys[0] < key)
                i++;
            s->children[i]->insertNonFull(key);
            root = s;
        } else {
            root->insertNonFull(key);
        }
    }
}

void BTree::remove(int key) {
    if (!root) return;
    root->remove(key);
    if (root->numKeys == 0) {
        BTreeNode* tmp = root;
        if (root->leaf)
            root = nullptr;
        else
            root = root->children[0];
        delete tmp;
    }
}

void BTreeNode::remove(int key) {
    int idx = findKey(key);
    if (idx < numKeys && keys[idx] == key) {
        if (leaf) removeFromLeaf(idx);
        else removeFromNonLeaf(idx);
    } else {
        if (leaf) return;
        bool flag = (idx == numKeys);
        if (children[idx]->numKeys < (ORDER / 2)) fill(idx);
        if (flag && idx > numKeys) children[idx - 1]->remove(key);
        else children[idx]->remove(key);
    }
}

int BTreeNode::findKey(int key) {
    int idx = 0;
    while (idx < numKeys && keys[idx] < key) idx++;
    return idx;
}

void BTreeNode::removeFromLeaf(int idx) {
    for (int i = idx + 1; i < numKeys; i++) keys[i - 1] = keys[i];
    numKeys--;
}

void BTreeNode::removeFromNonLeaf(int idx) {
    int key = keys[idx];
    if (children[idx]->numKeys >= ORDER / 2) {
        int pred = getPredecessor(idx);
        keys[idx] = pred;
        children[idx]->remove(pred);
    } else if (children[idx + 1]->numKeys >= ORDER / 2) {
        int succ = getSuccessor(idx);
        keys[idx] = succ;
        children[idx + 1]->remove(succ);
    } else {
        merge(idx);
        children[idx]->remove(key);
    }
}

int BTreeNode::getPredecessor(int idx) {
    BTreeNode* cur = children[idx];
    while (!cur->leaf) cur = cur->children[cur->numKeys];
    return cur->keys[cur->numKeys - 1];
}

int BTreeNode::getSuccessor(int idx) {
    BTreeNode* cur = children[idx + 1];
    while (!cur->leaf) cur = cur->children[0];
    return cur->keys[0];
}

void BTreeNode::fill(int idx) {
    if (idx != 0 && children[idx - 1]->numKeys >= ORDER / 2) borrowFromPrev(idx);
    else if (idx != numKeys && children[idx + 1]->numKeys >= ORDER / 2) borrowFromNext(idx);
    else {
        if (idx != numKeys) merge(idx);
        else merge(idx - 1);
    }
}

void BTreeNode::borrowFromPrev(int idx) {
    BTreeNode* child = children[idx];
    BTreeNode* sibling = children[idx - 1];
    for (int i = child->numKeys - 1; i >= 0; i--) child->keys[i + 1] = child->keys[i];
    if (!child->leaf) {
        for (int i = child->numKeys; i >= 0; i--) child->children[i + 1] = child->children[i];
    }
    child->keys[0] = keys[idx - 1];
    keys[idx - 1] = sibling->keys[sibling->numKeys - 1];
    child->numKeys++;
    sibling->numKeys--;
}

void BTreeNode::borrowFromNext(int idx) {
    BTreeNode* child = children[idx];
    BTreeNode* sibling = children[idx + 1];
    child->keys[child->numKeys] = keys[idx];
    keys[idx] = sibling->keys[0];
    child->numKeys++;
    sibling->numKeys--;
}

void BTreeNode::merge(int idx) {
    BTreeNode* child = children[idx];
    BTreeNode* sibling = children[idx + 1];
    child->keys[(ORDER / 2) - 1] = keys[idx];
    for (int i = 0; i < sibling->numKeys; i++) child->keys[i + (ORDER / 2)] = sibling->keys[i];
    for (int i = 0; i <= sibling->numKeys; i++) child->children[i + (ORDER / 2)] = sibling->children[i];
    numKeys--;
    delete sibling;
}

int main(){
    BTree tree;
    int values[] = {7, 8, 9, 10, 11, 16, 21, 18};
    f(i, 0, 8) tree.insert(values[i]);
    tree.remove(16);
    tree.remove(9);
    tree.remove(7);
    cout << "B-Tree Traversal: ";
    tree.traverse();
    cout << e;
    return 0;
}
